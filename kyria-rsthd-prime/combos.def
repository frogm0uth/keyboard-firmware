
/* Copyright 2020 @frogm0uth
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#if (__has_include("secrets.h"))
#include "secrets.h"
#endif

/** My combo definitions

Most of these are letter sequences. They are there for reasons such as:

- Remove awkward or tiring key sequences. For example, ERE has reversal between
  the left pinky and thumb, as does EVER. 

- In other cases, the combo is intended to make typing more fluid and relaxed,
  even though the key sequence is not that awkward, such as OUGH and TION.

- There are a number of other word endings on the right hand, such as ER and
  ING, for "splatting" with space or enter.

- Some are there to reduce usage of the inner column. Examples are OF and IZE.

- Some are vertical pairs that make it easier to press same-finger bigrams.

- A few are an alternative to a layer switch, like (, ) and backspace.

- Some are just handy abbreviations, like ".com".

The keys to activate each combo are - where possible - at least one of the keys
in the combo, but this wasn't always possible, especially when adjacent keys
were taken into account.

A set of combos like this is tied very closely to the key layout, and also to
personal preference. None of them are essential - the combo feature could be
turned off and you would still be able to type on the keyboard. However, the
general principles behind them could be applied to any layout.

 */

/**** Some comboes are commented out. There seems to be an issue with overlapping combos
 ** where the keyboard crashes if there are enough of them.
 **/

// Left hand - vertical pairs
CMB_STR(sc,              HK_S, KC_C)
CMB_STR(tw,              HK_T, KC_W)
CMB_STR(ph,              HK_H, KC_D)

    
// Left hand - adjacent pairs
CMB_KEY(lparen,    S(KC_9),   KC_D,    KC_K)
CMB_KEY(tab,       KC_TAB,    HK_H,    KC_F)


// Left hand - pairs with thumb
CMB_STR(tion,  HK_T, CL_NUMP)


// Right hand - vertical pairs
CMB_STR(lm,              KC_M, HK_N)
CMB_STR(ui,              KC_U, HK_I)

    
// Right hand - adjacent pairs
CMB_KEY(rparen, S(KC_0),    KC_J, KC_M)
CMB_STR(ould,               KC_U, CU_DOT_SLASH)
CMB_STR(ally,               CU_DOT_SLASH, KC_MINS)

CMB_KEY(backspace, KC_BSPC, KC_SCLN, HK_N)  
CMB_STR(er,                 HK_O, HK_A)

CMB_STR(very,               KC_Y, CU_COMMA_DOUBLEQUOTE)


// Right hand - diagonal pairs
CMB_STR(ious,            HK_I, CU_DOT_SLASH)
CMB_STR(ing,             HK_I, CU_COMMA_DOUBLEQUOTE)
CMB_STR(ough,            HK_O, KC_U)
CMB_LIT(youre, "you're", HK_O, KC_Y)
CMB_STR(able,            HK_A, CU_DOT_SLASH)
CMB_STR(es,              HK_A, CU_COMMA_DOUBLEQUOTE)


// Right hand - other
CMB_STR(ness, HK_N, CU_COMMA_DOUBLEQUOTE)
CMB_STR(less, KC_L, CU_COMMA_DOUBLEQUOTE)

CMB_STR(qua, HK_N, CU_CQ)
CMB_STR(qui, HK_I, CU_CQ)
CMB_STR(quo, HK_O, CU_CQ)


// Thumb combos
CMB_KEY(tab2,      KC_TAB,    CU_ED,   KC_ENT)
CMB_KEY(spotlight, G(KC_SPC), KC_SPC,  KC_ENT)


// Combos with left thumb and right hand
CMB_NUL(                    KC_E, KC_J) // secrets.h
CMB_STR(ize,                KC_E, KC_U)
CMB_STR(ized,               CU_ED, KC_U)
CMB_LIT(dotdotslash, "../", KC_E, CU_DOT_SLASH)
CMB_NUL(xxxx,               KC_E, KC_MINS)

CMB_STR(ight,               KC_E, HK_I)
CMB_STR(of,                 KC_E, HK_O)
CMB_STR(off,                KC_E, HK_A)
CMB_STR(que,                KC_E, CU_CQ)

CMB_STR(you,                KC_E, KC_Y)
CMB_STR(ever,               KC_E, CU_COMMA_DOUBLEQUOTE)

CMB_LIT(itis,  "it's",      CL_NUMP, HK_I)


// Left-thumb "inflections" of right-hand combos (any that use the ring finger)
CMB_LIT(ercom,   "er,",   KC_E,  HK_O, HK_A)
CMB_LIT(erdot,   "er.",   CU_ED, HK_O, HK_A)

CMB_LIT(ingcom,  "ing,",  KC_E,  HK_I, CU_COMMA_DOUBLEQUOTE)
CMB_LIT(ingdot,  "ing.",  CU_ED, HK_I, CU_COMMA_DOUBLEQUOTE)

#ifdef USE_INFLECTIONS
CMB_LIT(escom,   "es,",   KC_E,  HK_A, CU_COMMA_DOUBLEQUOTE)
CMB_LIT(esdot,   "es.",   CU_ED, HK_A, CU_COMMA_DOUBLEQUOTE)

CMB_LIT(allycom, "ally,", KC_E,  CU_DOT_SLASH, KC_MINS)
CMB_LIT(allydot, "ally.", CU_ED, CU_DOT_SLASH, KC_MINS)

CMB_LIT(ouldcom, "ould,", KC_E,  KC_U, CU_DOT_SLASH)
CMB_LIT(oulddot, "ould.", CU_ED, KC_U, CU_DOT_SLASH)

#ifdef THIS_BREAKS_MY_KYRIA
CMB_LIT(oughcom, "ough,", KC_E,  HK_O, KC_U)
CMB_LIT(oughdot, "ough.", CU_ED, HK_O, KC_U)

CMB_LIT(ablecom, "able,", KC_E,  HK_A, CU_DOT_SLASH)
CMB_LIT(abledot, "able.", CU_ED, HK_A, CU_DOT_SLASH)

#endif
#endif


// Combos with both hands, keyed off right
CMB_LIT(dotcom, ".com", KC_C, KC_M)
CMB_STR(from,           KC_W, KC_M)
CMB_NUL(xxxx,           KC_D, KC_M)
CMB_STR(ment,           HK_T, KC_M)
CMB_STR(my,             HK_H, KC_M)

CMB_NUL(                KC_C, KC_U) // secrets.h
CMB_NUL(xxxx,           KC_W, KC_U)
CMB_STR(minu,           KC_D, KC_U)
CMB_LIT(ment2, "ment",  KC_H, KC_U)

CMB_STR(if,   HK_H, HK_N)
CMB_STR(even, KC_P, HK_N)

CMB_STR(scr,   KC_C, KC_Y)
CMB_STR(which, KC_W, KC_Y)
CMB_STR(did,   KC_D, KC_Y)

CMB_STR(ere,  HK_R, KC_Y)
CMB_STR(has,  HK_S, KC_Y)
CMB_STR(her,  HK_T, KC_Y)
CMB_STR(his,  HK_H, KC_Y)

CMB_STR(been, KC_B, KC_Y)
CMB_STR(for,  KC_G, KC_Y)
CMB_STR(pho,  KC_P, KC_Y)

CMB_STR(key, HK_T, CU_COMMA_DOUBLEQUOTE)
CMB_STR(pwd, KC_P, CU_COMMA_DOUBLEQUOTE)


// Combos on both hands, keyed off left
CMB_LIT(iam,    "I'm",  CU_CX, KC_M)
CMB_LIT(iwould, "I'd",  CU_CX, KC_N)
CMB_LIT(iwill,  "I'll", CU_CX, KC_L)


// Array output combos
CMB_ARR(ccomment,
        ARRAY_PROTECT(
            KC_SLASH,
            KC_ASTERISK,
            KC_SPACE,
            KC_SPACE,
            KC_ASTERISK,
            KC_SLASH,
            KC_LEFT,
            KC_LEFT,
            KC_LEFT
    ),
    KC_C, CU_DOT_SLASH)

CMB_ARR(comment_newline,
        ARRAY_PROTECT(
            KC_ENTER,
            KC_ASTERISK,
            KC_SPACE,
            KC_TAB
    ),
    KC_W, CU_DOT_SLASH)

